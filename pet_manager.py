from datetime import datetime, timedelta

class PetManager:
    @staticmethod
    def calculate_stats(pet):
        current_time = datetime.now().timestamp()
        hours_since_feed = (current_time - pet.last_feed) / 3600
        
        # –£–º–µ–Ω—å—à–∞–µ–º –≥–æ–ª–æ–¥ –∏ —Å—á–∞—Å—Ç—å–µ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
        hunger_loss = min(hours_since_feed * 5, 100)
        happiness_loss = min(hours_since_feed * 3, 100)
        
        pet.hunger = max(0, pet.hunger - hunger_loss)
        pet.happiness = max(0, pet.happiness - happiness_loss)
        
        return pet

    @staticmethod
    def feed_pet(pet):
        if pet.hunger >= 100:
            return False, "–ü–∏—Ç–æ–º–µ—Ü –Ω–µ –≥–æ–ª–æ–¥–µ–Ω!"
        
        pet.hunger = min(100, pet.hunger + 30)
        pet.last_feed = datetime.now().timestamp()
        pet.experience += 5
        
        return True, "–ü–∏—Ç–æ–º–µ—Ü –Ω–∞–∫–æ—Ä–º–ª–µ–Ω! üçñ"

    @staticmethod
    def play_with_pet(pet):
        if pet.happiness >= 100:
            return False, "–ü–∏—Ç–æ–º–µ—Ü –Ω–µ —Ö–æ—á–µ—Ç –∏–≥—Ä–∞—Ç—å —Å–µ–π—á–∞—Å!"
        
        pet.happiness = min(100, pet.happiness + 20)
        pet.hunger = max(0, pet.hunger - 10)
        pet.experience += 10
        
        return True, "–í—ã –ø–æ–∏–≥—Ä–∞–ª–∏ —Å –ø–∏—Ç–æ–º—Ü–µ–º! üéÆ"

    @staticmethod
    def check_level_up(pet):
        required_exp = pet.level * 100
        if pet.experience >= required_exp:
            pet.level += 1
            return True, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –ø–∏—Ç–æ–º–µ—Ü –¥–æ—Å—Ç–∏–≥ {pet.level} —É—Ä–æ–≤–Ω—è! üéâ"
        return False, "" 