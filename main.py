from telegram import Update, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
import json
import os
import asyncio
from datetime import datetime
from pet_manager import PetManager
from bot_config import BOT_TOKEN, WEBAPP_URL

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7631766370:AAF4mf7nrDIKBDCwNpRMupADnXvoyixP0R4"

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤
class Pet:
    def __init__(self, owner_id, name=None):
        self.owner_id = owner_id
        self.name = name
        self.type = "egg"  # –Ω–∞—á–∏–Ω–∞–µ–º —Å —è–π—Ü–∞
        self.hunger = 100
        self.happiness = 100
        self.last_feed = datetime.now().timestamp()
        self.experience = 0
        self.level = 1

class PetVerseBot:
    def __init__(self):
        self.pets = {}  # —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–µ–≤
        self.load_data()
        self.pet_manager = PetManager()

    async def start(self, update: Update, context):
        keyboard = [[InlineKeyboardButton("üéÆ –û—Ç–∫—Ä—ã—Ç—å PetVerse", web_app=WebAppInfo(url=WEBAPP_URL))]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å PetVerse:",
            reply_markup=reply_markup
        )

    async def name_pet(self, update: Update, context):
        user_id = update.effective_user.id
        if user_id not in self.pets:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –ø–∏—Ç–æ–º—Ü–∞ —á–µ—Ä–µ–∑ /start")
            return

        if not context.args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /name <–∏–º—è>")
            return

        name = " ".join(context.args)
        self.pets[user_id].name = name
        await update.message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –ø–∏—Ç–æ–º–µ—Ü —Ç–µ–ø–µ—Ä—å –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è {name}! üéâ")

    def load_data(self):
        if os.path.exists('pets_data.json'):
            with open('pets_data.json', 'r') as f:
                data = json.load(f)
                for user_id, pet_data in data.items():
                    pet = Pet(int(user_id))
                    pet.__dict__.update(pet_data)
                    self.pets[int(user_id)] = pet

    def save_data(self):
        data = {str(user_id): pet.__dict__ for user_id, pet in self.pets.items()}
        with open('pets_data.json', 'w') as f:
            json.dump(data, f)

    async def status(self, update: Update, context):
        user_id = update.effective_user.id
        if user_id not in self.pets:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ.")
            return

        pet = self.pets[user_id]
        pet = self.pet_manager.calculate_stats(pet)
        
        status_text = (
            f"üêæ –ü–∏—Ç–æ–º–µ—Ü: {pet.name or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n"
            f"üìä –£—Ä–æ–≤–µ–Ω—å: {pet.level}\n"
            f"‚≠ê –û–ø—ã—Ç: {pet.experience}/{pet.level * 100}\n"
            f"üçñ –ì–æ–ª–æ–¥: {pet.hunger:.1f}%\n"
            f"üòä –°—á–∞—Å—Ç—å–µ: {pet.happiness:.1f}%\n"
            f"ü•ö –¢–∏–ø: {pet.type}"
        )
        await update.message.reply_text(status_text)

    async def feed(self, update: Update, context):
        user_id = update.effective_user.id
        if user_id not in self.pets:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ.")
            return

        pet = self.pets[user_id]
        success, message = self.pet_manager.feed_pet(pet)
        await update.message.reply_text(message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
        leveled_up, level_message = self.pet_manager.check_level_up(pet)
        if leveled_up:
            await update.message.reply_text(level_message)
        
        self.save_data()

    async def play(self, update: Update, context):
        user_id = update.effective_user.id
        if user_id not in self.pets:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ.")
            return

        pet = self.pets[user_id]
        success, message = self.pet_manager.play_with_pet(pet)
        await update.message.reply_text(message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
        leveled_up, level_message = self.pet_manager.check_level_up(pet)
        if leveled_up:
            await update.message.reply_text(level_message)
        
        self.save_data()

def run_bot():
    bot = PetVerseBot()
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("name", bot.name_pet))
    application.add_handler(CommandHandler("status", bot.status))
    application.add_handler(CommandHandler("feed", bot.feed))
    application.add_handler(CommandHandler("play", bot.play))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()
    print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω...")

if __name__ == "__main__":
    try:
        run_bot()
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...") 